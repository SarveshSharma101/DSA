package problems

import (
	"fmt"
	"testing"
)

func TestStack(test *testing.T) {
	stack := InitStack(5)

	fmt.Println("IsEmtpty: ", stack.IsEmpty())
	stack.Push(5)
	stack.Push(4)
	stack.Push(3)
	stack.Push(2)
	fmt.Println("IsFull: ", stack.IsFull())
	stack.Push(1)
	fmt.Println("IsFull: ", stack.IsFull())
	fmt.Println(stack.Top)
	stack.Display()

	stack.Pop()
	stack.Pop()
	stack.Pop()
	fmt.Println("----------------------------------")
	stack.Display()

}

func TestLLstack(test *testing.T) {
	stack := InitLLStack(10)
	fmt.Println("Isempty: ", stack.IsLLStackEmpty())
	fmt.Println("Size: ", stack.LLStackSize())
	fmt.Println("--------------------------------------")
	stack.Push(5)
	fmt.Println("Isempty: ", stack.IsLLStackEmpty())
	fmt.Println("Size: ", stack.LLStackSize())
	stack.Display()
	fmt.Println("--------------------------------------")
	stack.Push(6)
	fmt.Println("Isempty: ", stack.IsLLStackEmpty())
	fmt.Println("Size: ", stack.LLStackSize())
	stack.Display()
	fmt.Println("--------------------------------------")
	stack.Push(7)
	fmt.Println("Isempty: ", stack.IsLLStackEmpty())
	fmt.Println("Size: ", stack.LLStackSize())
	stack.Display()
	fmt.Println("--------------------------------------")
	stack.Pop()
	fmt.Println("Isempty: ", stack.IsLLStackEmpty())
	fmt.Println("Size: ", stack.LLStackSize())
	stack.Display()
	fmt.Println("--------------------------------------")
	stack.Pop()
	fmt.Println("Isempty: ", stack.IsLLStackEmpty())
	fmt.Println("Size: ", stack.LLStackSize())
	stack.Display()
	fmt.Println("--------------------------------------")
	stack.Pop()
	fmt.Println("Isempty: ", stack.IsLLStackEmpty())
	fmt.Println("Size: ", stack.LLStackSize())
	stack.Display()
	fmt.Println("--------------------------------------")
}

func TestQueue(test *testing.T) {
	q := InitQueue(10)
	fmt.Println("Front: ", q.QFront())
	fmt.Println("Rear: ", q.QRear())
	fmt.Println("Isempty: ", q.QIsEmpty())
	fmt.Println("Size: ", q.QSize())
	fmt.Println("--------------------------------------")
	q.QPut(5)
	fmt.Println("Front: ", q.QFront())
	fmt.Println("Rear: ", q.QRear())
	fmt.Println("Isempty: ", q.QIsEmpty())
	fmt.Println("Size: ", q.QSize())
	fmt.Println("--------------------------------------")
	q.QPut(6)
	fmt.Println("Front: ", q.QFront())
	fmt.Println("Rear: ", q.QRear())
	fmt.Println("Isempty: ", q.QIsEmpty())
	fmt.Println("Size: ", q.QSize())
	fmt.Println("--------------------------------------")
	q.QPut(7)
	fmt.Println("Front: ", q.QFront())
	fmt.Println("Rear: ", q.QRear())
	fmt.Println("Isempty: ", q.QIsEmpty())
	fmt.Println("Size: ", q.QSize())
	fmt.Println("--------------------------------------")
	q.QDelete()
	fmt.Println("Front: ", q.QFront())
	fmt.Println("Rear: ", q.QRear())
	fmt.Println("Isempty: ", q.QIsEmpty())
	fmt.Println("Size: ", q.QSize())
	fmt.Println("--------------------------------------")
	q.QDelete()
	fmt.Println("Front: ", q.QFront())
	fmt.Println("Rear: ", q.QRear())
	fmt.Println("Isempty: ", q.QIsEmpty())
	fmt.Println("Size: ", q.QSize())
	fmt.Println("--------------------------------------")
	q.QDelete()
	fmt.Println("Front: ", q.QFront())
	fmt.Println("Rear: ", q.QRear())
	fmt.Println("Isempty: ", q.QIsEmpty())
	fmt.Println("Size: ", q.QSize())
	fmt.Println("--------------------------------------")
}

func TestLLQueue(test *testing.T) {
	q := InitLLQueue(10)
	fmt.Println("Front: ", q.LLQFront())
	fmt.Println("Rear: ", q.LLQRear())
	fmt.Println("Isempty: ", q.IsLLQueueEmpty())
	fmt.Println("Size: ", q.LLQSize())
	fmt.Println("--------------------------------------")
	q.QPut(5)
	fmt.Println("Front: ", q.LLQFront())
	fmt.Println("Rear: ", q.LLQRear())
	fmt.Println("Isempty: ", q.IsLLQueueEmpty())
	fmt.Println("Size: ", q.LLQSize())
	fmt.Println("--------------------------------------")
	q.QPut(6)
	fmt.Println("Front: ", q.LLQFront())
	fmt.Println("Rear: ", q.LLQRear())
	fmt.Println("Isempty: ", q.IsLLQueueEmpty())
	fmt.Println("Size: ", q.LLQSize())
	fmt.Println("--------------------------------------")
	q.QPut(7)
	fmt.Println("Front: ", q.LLQFront())
	fmt.Println("Rear: ", q.LLQRear())
	fmt.Println("Isempty: ", q.IsLLQueueEmpty())
	fmt.Println("Size: ", q.LLQSize())
	fmt.Println("--------------------------------------")
	q.QDelete()
	fmt.Println("Front: ", q.LLQFront())
	fmt.Println("Rear: ", q.LLQRear())
	fmt.Println("Isempty: ", q.IsLLQueueEmpty())
	fmt.Println("Size: ", q.LLQSize())
	fmt.Println("--------------------------------------")
	q.QDelete()
	fmt.Println("Front: ", q.LLQFront())
	fmt.Println("Rear: ", q.LLQRear())
	fmt.Println("Isempty: ", q.IsLLQueueEmpty())
	fmt.Println("Size: ", q.LLQSize())
	fmt.Println("--------------------------------------")
	q.QDelete()
	fmt.Println("Front: ", q.LLQFront())
	fmt.Println("Rear: ", q.LLQRear())
	fmt.Println("Isempty: ", q.IsLLQueueEmpty())
	fmt.Println("Size: ", q.LLQSize())
	fmt.Println("--------------------------------------")
}
