package problems

import (
	"fmt"
	"testing"
)

func TestStack(test *testing.T) {
	stack := InitStack(5)

	fmt.Println("IsEmtpty: ", stack.IsEmpty())
	stack.Push(5)
	stack.Push(4)
	stack.Push(3)
	stack.Push(2)
	fmt.Println("IsFull: ", stack.IsFull())
	stack.Push(1)
	fmt.Println("IsFull: ", stack.IsFull())
	fmt.Println(stack.Top)
	stack.Display()

	stack.Pop()
	stack.Pop()
	stack.Pop()
	fmt.Println("----------------------------------")
	stack.Display()

}

func TestLLstack(test *testing.T) {
	stack := InitLLStack(10)
	fmt.Println("Isempty: ", stack.IsLLStackEmpty())
	fmt.Println("Size: ", stack.LLStackSize())
	fmt.Println("--------------------------------------")
	stack.Push(5)
	fmt.Println("Isempty: ", stack.IsLLStackEmpty())
	fmt.Println("Size: ", stack.LLStackSize())
	stack.Display()
	fmt.Println("--------------------------------------")
	stack.Push(6)
	fmt.Println("Isempty: ", stack.IsLLStackEmpty())
	fmt.Println("Size: ", stack.LLStackSize())
	stack.Display()
	fmt.Println("--------------------------------------")
	stack.Push(7)
	fmt.Println("Isempty: ", stack.IsLLStackEmpty())
	fmt.Println("Size: ", stack.LLStackSize())
	stack.Display()
	fmt.Println("--------------------------------------")
	stack.Pop()
	fmt.Println("Isempty: ", stack.IsLLStackEmpty())
	fmt.Println("Size: ", stack.LLStackSize())
	stack.Display()
	fmt.Println("--------------------------------------")
	stack.Pop()
	fmt.Println("Isempty: ", stack.IsLLStackEmpty())
	fmt.Println("Size: ", stack.LLStackSize())
	stack.Display()
	fmt.Println("--------------------------------------")
	stack.Pop()
	fmt.Println("Isempty: ", stack.IsLLStackEmpty())
	fmt.Println("Size: ", stack.LLStackSize())
	stack.Display()
	fmt.Println("--------------------------------------")
}

func TestQueue(test *testing.T) {
	q := InitQueue(10)
	fmt.Println("Front: ", q.QFront())
	fmt.Println("Rear: ", q.QRear())
	fmt.Println("Isempty: ", q.QIsEmpty())
	fmt.Println("Size: ", q.QSize())
	fmt.Println("--------------------------------------")
	q.QPut(5)
	fmt.Println("Front: ", q.QFront())
	fmt.Println("Rear: ", q.QRear())
	fmt.Println("Isempty: ", q.QIsEmpty())
	fmt.Println("Size: ", q.QSize())
	fmt.Println("--------------------------------------")
	q.QPut(6)
	fmt.Println("Front: ", q.QFront())
	fmt.Println("Rear: ", q.QRear())
	fmt.Println("Isempty: ", q.QIsEmpty())
	fmt.Println("Size: ", q.QSize())
	fmt.Println("--------------------------------------")
	q.QPut(7)
	fmt.Println("Front: ", q.QFront())
	fmt.Println("Rear: ", q.QRear())
	fmt.Println("Isempty: ", q.QIsEmpty())
	fmt.Println("Size: ", q.QSize())
	fmt.Println("--------------------------------------")
	q.QDelete()
	fmt.Println("Front: ", q.QFront())
	fmt.Println("Rear: ", q.QRear())
	fmt.Println("Isempty: ", q.QIsEmpty())
	fmt.Println("Size: ", q.QSize())
	fmt.Println("--------------------------------------")
	q.QDelete()
	fmt.Println("Front: ", q.QFront())
	fmt.Println("Rear: ", q.QRear())
	fmt.Println("Isempty: ", q.QIsEmpty())
	fmt.Println("Size: ", q.QSize())
	fmt.Println("--------------------------------------")
	q.QDelete()
	fmt.Println("Front: ", q.QFront())
	fmt.Println("Rear: ", q.QRear())
	fmt.Println("Isempty: ", q.QIsEmpty())
	fmt.Println("Size: ", q.QSize())
	fmt.Println("--------------------------------------")
}

func TestLLQueue(test *testing.T) {
	q := InitLLQueue(10)
	fmt.Println("Front: ", q.LLQFront())
	fmt.Println("Rear: ", q.LLQRear())
	fmt.Println("Isempty: ", q.IsLLQueueEmpty())
	fmt.Println("Size: ", q.LLQSize())
	fmt.Println("--------------------------------------")
	q.QPut(5)
	fmt.Println("Front: ", q.LLQFront())
	fmt.Println("Rear: ", q.LLQRear())
	fmt.Println("Isempty: ", q.IsLLQueueEmpty())
	fmt.Println("Size: ", q.LLQSize())
	fmt.Println("--------------------------------------")
	q.QPut(6)
	fmt.Println("Front: ", q.LLQFront())
	fmt.Println("Rear: ", q.LLQRear())
	fmt.Println("Isempty: ", q.IsLLQueueEmpty())
	fmt.Println("Size: ", q.LLQSize())
	fmt.Println("--------------------------------------")
	q.QPut(7)
	fmt.Println("Front: ", q.LLQFront())
	fmt.Println("Rear: ", q.LLQRear())
	fmt.Println("Isempty: ", q.IsLLQueueEmpty())
	fmt.Println("Size: ", q.LLQSize())
	fmt.Println("--------------------------------------")
	q.QDelete()
	fmt.Println("Front: ", q.LLQFront())
	fmt.Println("Rear: ", q.LLQRear())
	fmt.Println("Isempty: ", q.IsLLQueueEmpty())
	fmt.Println("Size: ", q.LLQSize())
	fmt.Println("--------------------------------------")
	q.QDelete()
	fmt.Println("Front: ", q.LLQFront())
	fmt.Println("Rear: ", q.LLQRear())
	fmt.Println("Isempty: ", q.IsLLQueueEmpty())
	fmt.Println("Size: ", q.LLQSize())
	fmt.Println("--------------------------------------")
	q.QDelete()
	fmt.Println("Front: ", q.LLQFront())
	fmt.Println("Rear: ", q.LLQRear())
	fmt.Println("Isempty: ", q.IsLLQueueEmpty())
	fmt.Println("Size: ", q.LLQSize())
	fmt.Println("--------------------------------------")
}

func TestQUS(test *testing.T) {
	q := InitQUS(10)
	fmt.Println("Front: ", q.QusFrontElement())
	fmt.Println("Rear: ", q.QusRearElement())
	fmt.Println("Isempty: ", q.QusIsEmpty())
	fmt.Println("Size: ", q.QusSize())
	fmt.Println("--------------------------------------")
	q.Enque(5)
	fmt.Println("Front: ", q.QusFrontElement())
	fmt.Println("Rear: ", q.QusRearElement())
	fmt.Println("Isempty: ", q.QusIsEmpty())
	fmt.Println("Size: ", q.QusSize())
	fmt.Println("--------------------------------------")
	q.Enque(6)
	fmt.Println("Front: ", q.QusFrontElement())
	fmt.Println("Rear: ", q.QusRearElement())
	fmt.Println("Isempty: ", q.QusIsEmpty())
	fmt.Println("Size: ", q.QusSize())
	fmt.Println("--------------------------------------")
	q.Enque(7)
	fmt.Println("Front: ", q.QusFrontElement())
	fmt.Println("Rear: ", q.QusRearElement())
	fmt.Println("Isempty: ", q.QusIsEmpty())
	fmt.Println("Size: ", q.QusSize())
	fmt.Println("--------------------------------------")
	q.Dequeue()
	fmt.Println("Front: ", q.QusFrontElement())
	fmt.Println("Rear: ", q.QusRearElement())
	fmt.Println("Isempty: ", q.QusIsEmpty())
	fmt.Println("Size: ", q.QusSize())
	fmt.Println("--------------------------------------")
	q.Dequeue()
	fmt.Println("Front: ", q.QusFrontElement())
	fmt.Println("Rear: ", q.QusRearElement())
	fmt.Println("Isempty: ", q.QusIsEmpty())
	fmt.Println("Size: ", q.QusSize())
	fmt.Println("--------------------------------------")
	q.Dequeue()
	fmt.Println("Front: ", q.QusFrontElement())
	fmt.Println("Rear: ", q.QusRearElement())
	fmt.Println("Isempty: ", q.QusIsEmpty())
	fmt.Println("Size: ", q.QusSize())
	fmt.Println("--------------------------------------")

}

func TestSUQ(test *testing.T) {
	stack := InitSuq(10)

	fmt.Println("Top: ", stack.SUQTop())
	fmt.Println("Isempty: ", stack.SUQIsEmpty())
	fmt.Println("Size: ", stack.SUQSize())
	stack.Display()
	fmt.Println("--------------------------------------")
	stack.SUQPush(5)
	fmt.Println("Top: ", stack.SUQTop())
	fmt.Println("Isempty: ", stack.SUQIsEmpty())
	fmt.Println("Size: ", stack.SUQSize())
	stack.Display()
	fmt.Println("--------------------------------------")
	stack.SUQPush(6)
	fmt.Println("Top: ", stack.SUQTop())
	fmt.Println("Isempty: ", stack.SUQIsEmpty())
	fmt.Println("Size: ", stack.SUQSize())
	stack.Display()
	fmt.Println("--------------------------------------")
	stack.SUQPush(7)
	fmt.Println("Top: ", stack.SUQTop())
	fmt.Println("Isempty: ", stack.SUQIsEmpty())
	fmt.Println("Size: ", stack.SUQSize())
	stack.Display()
	fmt.Println("--------------------------------------")
	stack.SUQPop()
	fmt.Println("Top: ", stack.SUQTop())
	fmt.Println("Isempty: ", stack.SUQIsEmpty())
	fmt.Println("Size: ", stack.SUQSize())
	stack.Display()
	fmt.Println("--------------------------------------")
	stack.SUQPop()
	fmt.Println("Top: ", stack.SUQTop())
	fmt.Println("Isempty: ", stack.SUQIsEmpty())
	fmt.Println("Size: ", stack.SUQSize())
	stack.Display()
	fmt.Println("--------------------------------------")
	stack.SUQPop()
	fmt.Println("Top: ", stack.SUQTop())
	fmt.Println("Isempty: ", stack.SUQIsEmpty())
	fmt.Println("Size: ", stack.SUQSize())
	stack.Display()
	fmt.Println("--------------------------------------")
}

func TestBalancedBraces(t *testing.T) {
	fmt.Println(IsBalancedParentheses("({})[]"))
	fmt.Println(IsBalancedParentheses("{()})("))
	fmt.Println(IsBalancedParentheses("{(})[]"))
}

func TestMinStack(test *testing.T) {
	stack := InitMinStack(10)

	stack.MinPush(1)
	stack.MinPush(2)
	stack.MinPush(-1)
	fmt.Println("Min: ", stack.GetMin())
	stack.Pop()
	fmt.Println("Peek: ", stack.MinStackPeek())
	fmt.Println("Min: ", stack.GetMin())
}

func TestEvalReversePolishNotation(test *testing.T) {
	A := []string{"6", "3", "+", "5", "/"}
	fmt.Println("--->", EvaluateReversePolishNotation(A))

	A = []string{"6", "-3", "+", "5", "-"}
	fmt.Println("--->", EvaluateReversePolishNotation(A))
	A = []string{"6", "3", "2", "+", "*", "5", "/"}
	fmt.Println("--->", EvaluateReversePolishNotation(A))
}

func TestSimplifiedPath(test *testing.T) {
	fmt.Println("1. /home/ ", SimplifyDirectoryPath("/home/"))
	fmt.Println("1. /../ ", SimplifyDirectoryPath("/../"))
	fmt.Println("1. /a/./b/../../c/../d/  ", SimplifyDirectoryPath("/a/./b/../../c/../d/"))
	fmt.Println("1. /a/./b/./c/./d/  ", SimplifyDirectoryPath("/a/./b/./c/./d/"))
	fmt.Println("1. /../../../../../a  ", SimplifyDirectoryPath("/../../../../../a"))
	fmt.Println("1.  /a/../.././../../.  ", SimplifyDirectoryPath("/a/../.././../../."))
	fmt.Println("1. /a//b//c//////d  ", SimplifyDirectoryPath("/a//b//c//////d"))
}

func TestTrappingRainwater(test *testing.T) {
	fmt.Println("Amt of water tarpped: ", TrappingRainWater(&[]int{1, 0, 2, 1, 0, 1, 3, 2, 1, 2, 1}))
	fmt.Println("Amt of water tarpped: ", TrappingRainWater(&[]int{1, 0, 0, 1, 0}))
	fmt.Println("Amt of water tarpped: ", TrappingRainWater(&[]int{1, 0, 2, 0, 0, 1}))

}
